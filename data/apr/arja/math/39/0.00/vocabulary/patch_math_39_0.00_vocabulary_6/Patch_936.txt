1 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java 309
Faulty:
super.storeTime(t);
Seed:
if (v == null) {
  v=new double[7][];
  for (int k=0; k < 7; ++k) {
    v[k]=new double[interpolatedState.length];
  }
}
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java 290
Faulty:
final int dimension=currentState.length;
Seed:
final int dimension=(currentState == null) ? -1 : currentState.length;
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 244
Faulty:
hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
Seed:
for (int j=0; j < y0.length; ++j) {
  double sum=b[0] * yDotK[0][j];
  for (int l=1; l < stages; ++l) {
    sum+=b[l] * yDotK[l][j];
  }
  yTmp[j]=y[j] + stepSize * sum;
}
**************************************************
4 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 255
Faulty:
double sum=a[k - 1][0] * yDotK[0][j];
Seed:
if (!isLastStep) {
  interpolator.storeTime(stepStart);
  final double nextT=stepStart + stepSize;
  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
  if (nextIsLast) {
    stepSize=t - stepStart;
  }
}
**************************************************
5 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/util/FastMath.java 3264
Faulty:
final long bits=Double.doubleToLongBits(d);
Seed:
if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
  return d;
}
**************************************************
Evaluations: 1100
EstimatedTime: 2457768
