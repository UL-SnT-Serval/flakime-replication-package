1 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 255
Faulty:
double sum=a[k - 1][0] * yDotK[0][j];
Seed:
if (!isLastStep) {
  interpolator.storeTime(stepStart);
  final double nextT=stepStart + stepSize;
  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
  if (nextIsLast) {
    stepSize=t - stepStart;
  }
}
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java 302
Faulty:
vectorsInitialized=false;
Seed:
reinitialize(y,forward,primaryMapper,secondaryMappers);
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/39/0.00/vocabulary/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 233
Faulty:
if (firstTime) {
  final double[] scale=new double[mainSetDimension];
  if (vecAbsoluteTolerance == null) {
    for (int i=0; i < scale.length; ++i) {
      scale[i]=scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
    }
  }
 else {
    for (int i=0; i < scale.length; ++i) {
      scale[i]=vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
    }
  }
  hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
  firstTime=false;
}
Seed:
sanityChecks(equations,t);
**************************************************
Evaluations: 440
EstimatedTime: 1008949
