1 InsertBefore /home/renaud/workspaces/flakime-replication-package/data/apr/arja/math/39/0.05/vocabulary-no-fl/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 257
Faulty:
sum+=a[k - 1][l] * yDotK[l][j];
Seed:
if (!isLastStep) {
  interpolator.storeTime(stepStart);
  final double nextT=stepStart + stepSize;
  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
  if (nextIsLast) {
    stepSize=t - stepStart;
  }
}
**************************************************
2 InsertBefore /home/renaud/workspaces/flakime-replication-package/data/apr/arja/math/39/0.05/vocabulary-no-fl/project/src/main/java/org/apache/commons/math/util/FastMath.java 3265
Faulty:
final long sign=bits & 0x8000000000000000L;
Seed:
if (Double.isInfinite(d)) {
  return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
}
 else if (d == 0) {
  return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
}
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/data/apr/arja/math/39/0.05/vocabulary-no-fl/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 233
Faulty:
if (firstTime) {
  final double[] scale=new double[mainSetDimension];
  if (vecAbsoluteTolerance == null) {
    for (int i=0; i < scale.length; ++i) {
      scale[i]=scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
    }
  }
 else {
    for (int i=0; i < scale.length; ++i) {
      scale[i]=vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
    }
  }
  hNew=initializeStep(forward,getOrder(),scale,stepStart,y,yDotK[0],yTmp,yDotK[1]);
  firstTime=false;
}
Seed:
stepSize=t - stepStart;
**************************************************
Evaluations: 1499
EstimatedTime: 3061626
