1 InsertBefore /home/renaud/workspaces/flakime-replication-package/data/apr/arja/math/39/0.05/vocabulary-no-fl/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 235
Faulty:
if (vecAbsoluteTolerance == null) {
  for (int i=0; i < scale.length; ++i) {
    scale[i]=scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
  }
}
 else {
  for (int i=0; i < scale.length; ++i) {
    scale[i]=vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
  }
}
Seed:
stepSize=t - stepStart;
**************************************************
2 InsertBefore /home/renaud/workspaces/flakime-replication-package/data/apr/arja/math/39/0.05/vocabulary-no-fl/project/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java 254
Faulty:
for (int j=0; j < y0.length; ++j) {
  double sum=a[k - 1][0] * yDotK[0][j];
  for (int l=1; l < k; ++l) {
    sum+=a[k - 1][l] * yDotK[l][j];
  }
  yTmp[j]=y[j] + stepSize * sum;
}
Seed:
if (!isLastStep) {
  interpolator.storeTime(stepStart);
  final double nextT=stepStart + stepSize;
  final boolean nextIsLast=forward ? (nextT >= t) : (nextT <= t);
  if (nextIsLast) {
    stepSize=t - stepStart;
  }
}
**************************************************
Evaluations: 1554
EstimatedTime: 3003564
