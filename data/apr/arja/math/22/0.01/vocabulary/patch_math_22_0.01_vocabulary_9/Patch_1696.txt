1 Replace /home/renaud/workspaces/flakime-replication-package/results/math/22/0.01/vocabulary/project/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java 184
Faulty:
return false;
Seed:
return true;
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/math/22/0.01/vocabulary/project/src/main/java/org/apache/commons/math3/distribution/FDistribution.java 275
Faulty:
return true;
Seed:
return false;
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/22/0.01/vocabulary/project/src/main/java/org/apache/commons/math3/dfp/DfpMath.java 522
Faulty:
if (y.equals(zero)) {
  return x.newInstance(one);
}
Seed:
if (x.equals(one) && y.classify() == Dfp.INFINITE) {
  x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
  return x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN));
}
**************************************************
4 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/22/0.01/vocabulary/project/src/main/java/org/apache/commons/math3/dfp/DfpMath.java 593
Faulty:
x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
Seed:
if (x.classify() == Dfp.INFINITE) {
  if (invert) {
    if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
      if (y.greaterThan(zero)) {
        return x.newInstance(x.newInstance((byte)-1,Dfp.INFINITE));
      }
 else {
        return x.newInstance(zero.negate());
      }
    }
 else {
      if (y.greaterThan(zero)) {
        return x.newInstance(x.newInstance((byte)1,Dfp.INFINITE));
      }
 else {
        return x.newInstance(zero);
      }
    }
  }
 else {
    if (y.greaterThan(zero)) {
      return x;
    }
 else {
      return x.newInstance(zero);
    }
  }
}
**************************************************
5 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/22/0.01/vocabulary/project/src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java 152
Faulty:
final double xscalepow=FastMath.pow(xscale,shape - 1);
Seed:
if (scale <= 0) {
  throw new NotStrictlyPositiveException(LocalizedFormats.SCALE,scale);
}
**************************************************
Evaluations: 1789
EstimatedTime: 4180729
