1 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.05/vocabulary/project/src/main/java/org/apache/commons/math/util/MathUtils.java 1458
Faulty:
if (sign == -1) {
  unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));
}
 else {
  unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));
}
Seed:
switch (roundingMethod) {
case BigDecimal.ROUND_CEILING:
  if (sign == -1) {
    unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));
  }
 else {
    unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));
  }
break;
case BigDecimal.ROUND_DOWN:
unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));
break;
case BigDecimal.ROUND_FLOOR:
if (sign == -1) {
unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));
}
 else {
unscaled=FastMath.floor(FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY));
}
break;
case BigDecimal.ROUND_HALF_DOWN:
{
unscaled=FastMath.nextAfter(unscaled,Double.NEGATIVE_INFINITY);
double fraction=unscaled - FastMath.floor(unscaled);
if (fraction > 0.5) {
unscaled=FastMath.ceil(unscaled);
}
 else {
unscaled=FastMath.floor(unscaled);
}
break;
}
case BigDecimal.ROUND_HALF_EVEN:
{
double fraction=unscaled - FastMath.floor(unscaled);
if (fraction > 0.5) {
unscaled=FastMath.ceil(unscaled);
}
 else if (fraction < 0.5) {
unscaled=FastMath.floor(unscaled);
}
 else {
if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math.floor(unscaled) / 2.0)) {
unscaled=FastMath.floor(unscaled);
}
 else {
unscaled=FastMath.ceil(unscaled);
}
}
break;
}
case BigDecimal.ROUND_HALF_UP:
{
unscaled=FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY);
double fraction=unscaled - FastMath.floor(unscaled);
if (fraction >= 0.5) {
unscaled=FastMath.ceil(unscaled);
}
 else {
unscaled=FastMath.floor(unscaled);
}
break;
}
case BigDecimal.ROUND_UNNECESSARY:
if (unscaled != FastMath.floor(unscaled)) {
throw new MathArithmeticException();
}
break;
case BigDecimal.ROUND_UP:
unscaled=FastMath.ceil(FastMath.nextAfter(unscaled,Double.POSITIVE_INFINITY));
break;
default :
throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,roundingMethod,"ROUND_CEILING",BigDecimal.ROUND_CEILING,"ROUND_DOWN",BigDecimal.ROUND_DOWN,"ROUND_FLOOR",BigDecimal.ROUND_FLOOR,"ROUND_HALF_DOWN",BigDecimal.ROUND_HALF_DOWN,"ROUND_HALF_EVEN",BigDecimal.ROUND_HALF_EVEN,"ROUND_HALF_UP",BigDecimal.ROUND_HALF_UP,"ROUND_UNNECESSARY",BigDecimal.ROUND_UNNECESSARY,"ROUND_UP",BigDecimal.ROUND_UP);
}
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.05/vocabulary/project/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java 188
Faulty:
x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
Seed:
inverted=!inverted;
**************************************************
Evaluations: 1113
EstimatedTime: 1638001
