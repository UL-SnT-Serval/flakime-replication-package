1 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.07/vocabulary/project/src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java 273
Faulty:
final double[] xSmallest=getPoint(0).getPointRef();
Seed:
for (int i=0; i < n; i++) {
  final double[] x=getPoint(i).getPointRef();
  for (int j=0; j < n; j++) {
    centroid[j]+=x[j];
  }
}
**************************************************
2 Delete /home/renaud/workspaces/flakime-replication-package/results/math/50/0.07/vocabulary/project/src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java 149
Faulty:
totalEvaluations=0;
Seed:
maxEvaluations=maxEval;
**************************************************
3 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.07/vocabulary/project/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java 188
Faulty:
x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
Seed:
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {
switch (allowed) {
case ANY_SIDE:
    return x1;
case LEFT_SIDE:
  return inverted ? x1 : x0;
case RIGHT_SIDE:
return inverted ? x0 : x1;
case BELOW_SIDE:
return (f1 <= 0) ? x1 : x0;
case ABOVE_SIDE:
return (f1 >= 0) ? x1 : x0;
default :
throw new MathInternalError();
}
}
**************************************************
Evaluations: 327
EstimatedTime: 280647
