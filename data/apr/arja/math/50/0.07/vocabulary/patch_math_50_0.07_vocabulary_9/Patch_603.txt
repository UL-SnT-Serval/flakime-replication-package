1 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.07/vocabulary/project/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java 188
Faulty:
x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
Seed:
incrementEvaluationCount();
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.07/vocabulary/project/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java 147
Faulty:
return buildPolynomial(degree,LAGUERRE_COEFFICIENTS,new RecurrenceCoefficientsGenerator(){
  /** 
 * {@inheritDoc} 
 */
  public BigFraction[] generate(  int k){
    final int kP1=k + 1;
    return new BigFraction[]{new BigFraction(2 * k + 1,kP1),new BigFraction(-1,kP1),new BigFraction(k,kP1)};
  }
}
);
Seed:
return buildPolynomial(degree,LAGUERRE_COEFFICIENTS,new RecurrenceCoefficientsGenerator(){
  /** 
 * {@inheritDoc} 
 */
  public BigFraction[] generate(  int k){
    final int kP1=k + 1;
    return new BigFraction[]{new BigFraction(2 * k + 1,kP1),new BigFraction(-1,kP1),new BigFraction(k,kP1)};
  }
}
);
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.07/vocabulary/project/src/main/java/org/apache/commons/math/genetics/RandomKey.java 255
Faulty:
if (originalData.size() != permutedData.size()) {
  throw new IllegalArgumentException("originalData and permutedData must have same length");
}
Seed:
if (originalData.size() != permutedData.size()) {
  throw new IllegalArgumentException("originalData and permutedData must have same length");
}
**************************************************
Evaluations: 764
EstimatedTime: 1292344
