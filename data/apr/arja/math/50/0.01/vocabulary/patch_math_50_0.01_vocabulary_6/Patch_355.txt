1 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.01/vocabulary/project/src/main/java/org/apache/commons/math/util/FastMath.java 3700
Faulty:
return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
Seed:
if (Double.isNaN(f) || Double.isNaN(direction)) {
  return Float.NaN;
}
 else if (f == direction) {
  return (float)direction;
}
 else if (Float.isInfinite(f)) {
  return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
}
 else if (f == 0f) {
  return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
}
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.01/vocabulary/project/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java 188
Faulty:
x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
Seed:
f0*=0.5;
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.01/vocabulary/project/src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java 274
Faulty:
for (int i=1; i <= n; i++) {
  final double[] x=getPoint(i).getPoint();
  for (int j=0; j < n; j++) {
    x[j]=xSmallest[j] + sigma * (x[j] - xSmallest[j]);
  }
  setPoint(i,new RealPointValuePair(x,Double.NaN,false));
}
Seed:
replaceWorstPoint(reflected,comparator);
**************************************************
Evaluations: 391
EstimatedTime: 338520
