1 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.01/vocabulary/project/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java 189
Faulty:
f0=computeObjectiveValue(x0);
Seed:
if (f1 == 0.0) {
  return x1;
}
**************************************************
2 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.01/vocabulary/project/src/main/java/org/apache/commons/math/util/FastMath.java 3709
Faulty:
if ((direction < f) ^ (sign == 0)) {
  return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
}
 else {
  return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
}
Seed:
for (int i=0; i < 14; i++) {
  double xs[]=new double[2];
  double ys[]=new double[2];
  double as[]=new double[2];
  as[0]=COSINE_TABLE_A[i];
  as[1]=COSINE_TABLE_B[i];
  splitReciprocal(as,ys);
  xs[0]=SINE_TABLE_A[i];
  xs[1]=SINE_TABLE_B[i];
  splitMult(xs,ys,as);
  TANGENT_TABLE_A[i]=as[0];
  TANGENT_TABLE_B[i]=as[1];
}
**************************************************
3 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.01/vocabulary/project/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java 188
Faulty:
x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
Seed:
incrementEvaluationCount();
**************************************************
4 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.01/vocabulary/project/src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java 274
Faulty:
for (int i=1; i <= n; i++) {
  final double[] x=getPoint(i).getPoint();
  for (int j=0; j < n; j++) {
    x[j]=xSmallest[j] + sigma * (x[j] - xSmallest[j]);
  }
  setPoint(i,new RealPointValuePair(x,Double.NaN,false));
}
Seed:
for (int j=0; j < n; j++) {
  xR[j]=centroid[j] + rho * (centroid[j] - xWorst[j]);
}
**************************************************
Evaluations: 224
EstimatedTime: 195843
