1 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/math/50/0.09/vocabulary/project/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java 332
Faulty:
break;
Seed:
for (int i=0; i < n; ++i) {
  final double x=xval[i];
  if (i > 0) {
    updateBandwidthInterval(xval,weights,i,bandwidthInterval);
  }
  final int ileft=bandwidthInterval[0];
  final int iright=bandwidthInterval[1];
  final int edge;
  if (xval[i] - xval[ileft] > xval[iright] - xval[i]) {
    edge=ileft;
  }
 else {
    edge=iright;
  }
  double sumWeights=0;
  double sumX=0;
  double sumXSquared=0;
  double sumY=0;
  double sumXY=0;
  double denom=FastMath.abs(1.0 / (xval[edge] - x));
  for (int k=ileft; k <= iright; ++k) {
    final double xk=xval[k];
    final double yk=yval[k];
    final double dist=(k < i) ? x - xk : xk - x;
    final double w=tricube(dist * denom) * robustnessWeights[k] * weights[k];
    final double xkw=xk * w;
    sumWeights+=w;
    sumX+=xkw;
    sumXSquared+=xk * xkw;
    sumY+=yk * w;
    sumXY+=yk * xkw;
  }
  final double meanX=sumX / sumWeights;
  final double meanY=sumY / sumWeights;
  final double meanXY=sumXY / sumWeights;
  final double meanXSquared=sumXSquared / sumWeights;
  final double beta;
  if (FastMath.sqrt(FastMath.abs(meanXSquared - meanX * meanX)) < accuracy) {
    beta=0;
  }
 else {
    beta=(meanXY - meanX * meanY) / (meanXSquared - meanX * meanX);
  }
  final double alpha=meanY - beta * meanX;
  res[i]=beta * x + alpha;
  residuals[i]=FastMath.abs(yval[i] - res[i]);
}
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/math/50/0.09/vocabulary/project/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java 188
Faulty:
x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
Seed:
incrementEvaluationCount();
**************************************************
Evaluations: 1701
EstimatedTime: 1843389
