1 Replace /home/renaud/workspaces/flakime-replication-package/results/lang/20/0.02/vocabulary/project/src/main/java/org/apache/commons/lang3/StringUtils.java 3383
Faulty:
StringBuilder buf=new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());
Seed:
StringBuilder buf=new StringBuilder(256);
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/lang/20/0.02/vocabulary/project/src/main/java/org/apache/commons/lang3/StringUtils.java 3298
Faulty:
StringBuilder buf=new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
Seed:
StringBuilder buf=new StringBuilder(32);
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/lang/20/0.02/vocabulary/project/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java 592
Faulty:
if (startMatchLen == 0) {
  pos++;
}
 else {
  if (pos > offset && chars[pos - 1] == escape) {
    buf.deleteCharAt(pos - 1);
    chars=buf.buffer;
    lengthChange--;
    altered=true;
    bufEnd--;
  }
 else {
    int startPos=pos;
    pos+=startMatchLen;
    int endMatchLen=0;
    int nestedVarCount=0;
    while (pos < bufEnd) {
      if (isEnableSubstitutionInVariables() && (endMatchLen=prefixMatcher.isMatch(chars,pos,offset,bufEnd)) != 0) {
        nestedVarCount++;
        pos+=endMatchLen;
        continue;
      }
      endMatchLen=suffixMatcher.isMatch(chars,pos,offset,bufEnd);
      if (endMatchLen == 0) {
        pos++;
      }
 else {
        if (nestedVarCount == 0) {
          String varName=new String(chars,startPos + startMatchLen,pos - startPos - startMatchLen);
          if (isEnableSubstitutionInVariables()) {
            StrBuilder bufName=new StrBuilder(varName);
            substitute(bufName,0,bufName.length());
            varName=bufName.toString();
          }
          pos+=endMatchLen;
          int endPos=pos;
          if (priorVariables == null) {
            priorVariables=new ArrayList<String>();
            priorVariables.add(new String(chars,offset,length));
          }
          checkCyclicSubstitution(varName,priorVariables);
          priorVariables.add(varName);
          String varValue=resolveVariable(varName,buf,startPos,endPos);
          if (varValue != null) {
            int varLen=varValue.length();
            buf.replace(startPos,endPos,varValue);
            altered=true;
            int change=substitute(buf,startPos,varLen,priorVariables);
            change=change + (varLen - (endPos - startPos));
            pos+=change;
            bufEnd+=change;
            lengthChange+=change;
            chars=buf.buffer;
          }
          priorVariables.remove(priorVariables.size() - 1);
          break;
        }
 else {
          nestedVarCount--;
          pos+=endMatchLen;
        }
      }
    }
  }
}
Seed:
if (prefixMatcher == null) {
  throw new IllegalArgumentException("Variable prefix matcher must not be null!");
}
**************************************************
Evaluations: 1196
EstimatedTime: 347412
