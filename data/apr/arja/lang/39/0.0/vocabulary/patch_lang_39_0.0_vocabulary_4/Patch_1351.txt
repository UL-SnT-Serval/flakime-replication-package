1 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/lang/39/0.0/vocabulary/project/src/java/org/apache/commons/lang3/StringUtils.java 3691
Faulty:
buf.append(replacementList[replaceIndex]);
Seed:
for (int i=0; i < searchLength; i++) {
  if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
    continue;
  }
  tempIndex=text.indexOf(searchList[i],start);
  if (tempIndex == -1) {
    noMoreMatchesForReplIndex[i]=true;
  }
 else {
    if (textIndex == -1 || tempIndex < textIndex) {
      textIndex=tempIndex;
      replaceIndex=i;
    }
  }
}
**************************************************
2 Replace /home/renaud/workspaces/flakime-replication-package/results/lang/39/0.0/vocabulary/project/src/java/org/apache/commons/lang3/StringUtils.java 3675
Faulty:
for (int i=0; i < searchList.length; i++) {
  int greater=replacementList[i].length() - searchList[i].length();
  if (greater > 0) {
    increase+=3 * greater;
  }
}
Seed:
if (searchLength != replacementLength) {
  throw new IllegalArgumentException("Search and Replace array lengths don't match: " + searchLength + " vs "+ replacementLength);
}
**************************************************
3 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/lang/39/0.0/vocabulary/project/src/java/org/apache/commons/lang3/StringUtils.java 3624
Faulty:
int replacementLength=replacementList.length;
Seed:
if (timeToLive < 0) {
  throw new IllegalStateException("TimeToLive of " + timeToLive + " is less than 0: "+ text);
}
**************************************************
4 InsertBefore /home/renaud/workspaces/flakime-replication-package/results/lang/39/0.0/vocabulary/project/src/java/org/apache/commons/lang3/StringUtils.java 3696
Faulty:
replaceIndex=-1;
Seed:
while (textIndex != -1) {
  for (int i=start; i < textIndex; i++) {
    buf.append(text.charAt(i));
  }
  buf.append(replacementList[replaceIndex]);
  start=textIndex + searchList[replaceIndex].length();
  textIndex=-1;
  replaceIndex=-1;
  tempIndex=-1;
  for (int i=0; i < searchLength; i++) {
    if (noMoreMatchesForReplIndex[i] || searchList[i] == null || searchList[i].length() == 0 || replacementList[i] == null) {
      continue;
    }
    tempIndex=text.indexOf(searchList[i],start);
    if (tempIndex == -1) {
      noMoreMatchesForReplIndex[i]=true;
    }
 else {
      if (textIndex == -1 || tempIndex < textIndex) {
        textIndex=tempIndex;
        replaceIndex=i;
      }
    }
  }
}
**************************************************
Evaluations: 1293
EstimatedTime: 291228
